version: "2"

services:

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - chatnet
  kafka:
    image: docker.io/bitnami/kafka:3.3
    hostname: kafka
    ports:
      - "9093:9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - chatnet

  redis:
    image: docker.io/bitnami/redis:latest
    volumes:
      - "redis_data:/bitnami/redis/data"
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - chatnet
  tokenservice:
    build:
      context: .
      dockerfile: backend/token-service/Dockerfile
    container_name: tokenservice
    hostname: tokenservice
    networks: 
      - chatnet
    depends_on:
      - redis
    restart: on-failure

  groupmysql:
    image: mysql
    container_name: groupmysql
    hostname: groupmysql
    networks:
      - chatnet
    volumes:
      - groupmysql_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
  groupservice:
    build:
      context: .
      dockerfile: backend/group-service/Dockerfile
    container_name: groupservice
    hostname: groupservice
    networks: 
      - chatnet
    ports:
      - "8081:8080"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - kafka
      - tokenservice
      - groupmysql
    restart: on-failure

  messagemysql:
    image: mysql
    container_name: messagemysql
    hostname: messagemysql
    networks:
      - chatnet
    volumes:
      - messagemysql_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
  messageservice:
    build:
      context: .
      dockerfile: backend/message-service/Dockerfile
    container_name: messageservice
    hostname: messageservice
    networks: 
      - chatnet
    ports:
      - "8082:8080"
    depends_on:
      - kafka
      - tokenservice
      - messagemysql
    restart: on-failure

  usermysql:
    image: mysql
    container_name: usermysql
    hostname: usermysql
    networks:
      - chatnet
    volumes:
      - usermysql_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
  userservice:
    build:
      context: .
      dockerfile: backend/user-service/Dockerfile
    container_name: userservice
    hostname: userservice
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    networks: 
      - chatnet
    ports:
      - "8083:8080"
    depends_on:
      - kafka
      - tokenservice
      - usermysql
    restart: on-failure

  wsmysql:
    image: mysql
    container_name: wsmysql
    hostname: wsmysql
    networks:
      - chatnet
    volumes:
      - wsmysql_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
  wsservice:
    build:
      context: .
      dockerfile: backend/ws-service/Dockerfile
    container_name: wsservice
    hostname: wsservice
    networks: 
      - chatnet
    ports:
      - "8084:8080"
    depends_on:
      - kafka
      - tokenservice
      - wsmysql
    restart: on-failure

  elasticsearch:
    image: docker.io/bitnami/elasticsearch:8
    hostname: elastic
    networks:
      - chatnet 
    volumes:
      - "elasticsearch_data:/bitnami/elasticsearch"
  searchservice:
    build:
      context: .
      dockerfile: backend/search-service/Dockerfile
    container_name: searchservice
    hostname: searchservice
    networks:
      - chatnet
    ports:
      - "8085:8080"
    depends_on:
      - kafka
      - tokenservice
      - elasticsearch
    restart: on-failure

  react:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend
    hostname: frontend
    ports:
      - "3000:80"

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  groupmysql_data:
    driver: local
  messagemysql_data:
    driver: local
  usermysql_data:
    driver: local
  wsmysql_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  chatnet:
    driver: bridge