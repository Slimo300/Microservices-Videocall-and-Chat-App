version: "2"

services:

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - chatnet
  kafka:
    image: docker.io/bitnami/kafka:3.3
    hostname: kafka
    container_name: kafka
    ports:
      - "9093:9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - chatnet

  groupmysql:
    image: mysql
    container_name: groupmysql
    hostname: groupmysql
    networks:
      - chatnet
    volumes:
      - groupmysql_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: chatapp
      MYSQL_USER: chat
      MYSQL_PASSWORD: password12
      MYSQL_ROOT_PASSWORD: password123
  groupservice:
    build: backend/group-service
    container_name: groupservice
    hostname: groupservice
    networks: 
      - chatnet
    ports:
      - "8081:8080"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      MYSQL_ADDRESS: chat:password12@tcp(groupmysql:3306)/chatapp
      HTTP_PORT: 8080
      HTTPS_PORT: 8090
      TOKEN_SERVICE_ADDRESS: tokenservice:9000
      ORIGIN: http://localhost:3000
      BROKER_ADDRESS: kafka:9092
      S3_BUCKET: ${S3_BUCKET}
      CERT_DIR: /cert
    depends_on:
      - kafka
      - tokenservice
      - groupmysql
    restart: on-failure
    volumes:
      - ${PWD}/cert:/cert

  messagemysql:
    image: mysql
    container_name: messagemysql
    hostname: messagemysql
    networks:
      - chatnet
    volumes:
      - messagemysql_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: chatapp
      MYSQL_USER: chat
      MYSQL_PASSWORD: password12
      MYSQL_ROOT_PASSWORD: password123
  messageservice:
    build: backend/message-service
    container_name: messageservice
    hostname: messageservice
    networks: 
      - chatnet
    ports:
      - "8082:8080"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      MYSQL_ADDRESS: chat:password12@tcp(messagemysql:3306)/chatapp
      HTTP_PORT: 8080
      HTTPS_PORT: 8090
      TOKEN_SERVICE_ADDRESS: tokenservice:9000
      ORIGIN: http://localhost:3000
      BROKER_ADDRESS: kafka:9092
      S3_BUCKET: ${S3_BUCKET}
      CERT_DIR: /cert
    depends_on:
      - kafka
      - tokenservice
      - messagemysql
    restart: on-failure
    volumes:
      - ${PWD}/cert:/cert

  wsmysql:
    image: mysql
    container_name: wsmysql
    hostname: wsmysql
    networks:
      - chatnet
    volumes:
      - wsmysql_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: chatapp
      MYSQL_USER: chat
      MYSQL_PASSWORD: password12
      MYSQL_ROOT_PASSWORD: password123
  wsservice:
    build: backend/ws-service
    container_name: wsservice
    hostname: wsservice
    environment:
      MYSQL_ADDRESS: chat:password12@tcp(wsmysql:3306)/chatapp
      HTTP_PORT: 8080
      HTTPS_PORT: 8090
      TOKEN_SERVICE_ADDRESS: tokenservice:9000
      ORIGIN: http://localhost:3000
      BROKER_ADDRESS: kafka:9092
      CERT_DIR: /cert
    networks: 
      - chatnet
    ports:
      - "8084:8080"
    depends_on:
      - kafka
      - tokenservice
      - wsmysql
    restart: on-failure
    volumes:
      - ${PWD}/cert:/cert

  elasticsearch:
    image: docker.io/bitnami/elasticsearch:8
    hostname: elastic
    networks:
      - chatnet 
    volumes:
      - "elasticsearch_data:/bitnami/elasticsearch"
  searchservice:
    build: backend/search-service
    container_name: searchservice
    hostname: searchservice
    networks:
      - chatnet
    ports:
      - "8085:8080"
    environment:
      ES_ADDRESS: "http://elastic:9200"
      ES_USER:
      ES_PASSWORD:
      HTTP_PORT: 8080
      HTTPS_PORT: 8090
      TOKEN_SERVICE_ADDRESS: tokenservice:9000
      ORIGIN: http://localhost:3000
      BROKER_ADDRESS: kafka:9092
      CERT_DIR: /cert
    depends_on:
      - kafka
      - tokenservice
      - elasticsearch
    restart: on-failure
    volumes:
      - ${PWD}/cert:/cert

  react:
    build: frontend
    container_name: frontend
    hostname: frontend
    ports:
      - "3000:80"

  redis:
    image: docker.io/bitnami/redis:latest
    hostname: redis
    container_name: redis
    volumes:
      - "redis_data:/bitnami/redis/data"
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
      - REDIS_PASSWORD=redis
    networks:
      - chatnet
  tokenservice:
    build: backend/token-service
    environment:
      GRPC_PORT: 9000
      REDIS_ADDRESS: redis:6379
      REDIS_PASSWORD: redis
      REFRESH_SECRET: secret
      REFRESH_DURATION: 86400s
      ACCESS_DURATION: 1200s
    container_name: tokenservice
    hostname: tokenservice
    networks: 
      - chatnet
    depends_on:
      - redis
    restart: on-failure

  usermysql:
    image: mysql
    container_name: usermysql
    hostname: usermysql
    networks:
      - chatnet
    volumes:
      - usermysql_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: chatapp
      MYSQL_USER: chat
      MYSQL_PASSWORD: password12
      MYSQL_ROOT_PASSWORD: password123
  userservice:
    build: backend/user-service
    container_name: userservice
    hostname: userservice
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      MYSQL_ADDRESS: chat:password12@tcp(usermysql:3306)/chatapp
      HTTP_PORT: 8080
      HTTPS_PORT: 8090
      TOKEN_SERVICE_ADDRESS: tokenservice:9000
      EMAIL_SERVICE_ADDRESS: emailservice:9000
      ORIGIN: http://localhost:3000
      DOMAIN: localhost
      BROKER_ADDRESS: kafka:9092
      S3_BUCKET: ${S3_BUCKET}
      CERT_DIR: /cert
    networks: 
      - chatnet
    ports:
      - "8083:8080"
    depends_on:
      - kafka
      - tokenservice
      - emailservice
      - usermysql
    restart: on-failure
    volumes:
      - ${PWD}/cert:/cert

  emailservice:
    build: backend/email-service
    container_name: emailservice
    hostname: emailservice
    environment:
      GRPC_PORT: 9000
      ORIGIN: http://localhost:3000
      EMAIL_FROM: MicroChat@mail.com
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    networks:
      - chatnet
    restart: on-failure

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  groupmysql_data:
    driver: local
  messagemysql_data:
    driver: local
  usermysql_data:
    driver: local
  wsmysql_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  chatnet:
    driver: bridge