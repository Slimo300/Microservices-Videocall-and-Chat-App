// Code generated by mockery v2.8.0. DO NOT EDIT.

package database

import (
	models "github.com/Slimo300/MicroservicesChatApp/backend/user-service/models"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// DBLayerMock is an autogenerated mock type for the DBLayer type
type DBLayerMock struct {
	mock.Mock
}

// DeleteProfilePicture provides a mock function with given fields: userID
func (_m *DBLayerMock) DeleteProfilePicture(userID uuid.UUID) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProfilePictureURL provides a mock function with given fields: userID
func (_m *DBLayerMock) GetProfilePictureURL(userID uuid.UUID) (string, error) {
	ret := _m.Called(userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *DBLayerMock) GetUserByEmail(email string) (models.User, error) {
	ret := _m.Called(email)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: uid
func (_m *DBLayerMock) GetUserById(uid uuid.UUID) (models.User, error) {
	ret := _m.Called(uid)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.User); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *DBLayerMock) GetUserByUsername(username string) (models.User, error) {
	ret := _m.Called(username)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEmailInDatabase provides a mock function with given fields: email
func (_m *DBLayerMock) IsEmailInDatabase(email string) bool {
	ret := _m.Called(email)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsUsernameInDatabase provides a mock function with given fields: username
func (_m *DBLayerMock) IsUsernameInDatabase(username string) bool {
	ret := _m.Called(username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewVerificationCode provides a mock function with given fields: userID, code
func (_m *DBLayerMock) NewVerificationCode(userID uuid.UUID, code string) (models.VerificationCode, error) {
	ret := _m.Called(userID, code)

	var r0 models.VerificationCode
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) models.VerificationCode); ok {
		r0 = rf(userID, code)
	} else {
		r0 = ret.Get(0).(models.VerificationCode)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(userID, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: _a0
func (_m *DBLayerMock) RegisterUser(_a0 models.User) (models.User, error) {
	ret := _m.Called(_a0)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPassword provides a mock function with given fields: userID, password
func (_m *DBLayerMock) SetPassword(userID uuid.UUID, password string) error {
	ret := _m.Called(userID, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(userID, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetProfilePicture provides a mock function with given fields: userID, newURI
func (_m *DBLayerMock) SetProfilePicture(userID uuid.UUID, newURI string) error {
	ret := _m.Called(userID, newURI)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(userID, newURI)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignInUser provides a mock function with given fields: id
func (_m *DBLayerMock) SignInUser(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignOutUser provides a mock function with given fields: id
func (_m *DBLayerMock) SignOutUser(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyCode provides a mock function with given fields: userID, code
func (_m *DBLayerMock) VerifyCode(userID uuid.UUID, code string) error {
	ret := _m.Called(userID, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(userID, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
