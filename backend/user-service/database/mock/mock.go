// Code generated by mockery v2.14.1. DO NOT EDIT.

package mock

import (
	models "github.com/Slimo300/MicroservicesChatApp/backend/user-service/models"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// DBLayerMock is an autogenerated mock type for the DBLayer type
type DBLayerMock struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: userID, oldPassword, newPassword
func (_m *DBLayerMock) ChangePassword(userID uuid.UUID, oldPassword string, newPassword string) error {
	ret := _m.Called(userID, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, string) error); ok {
		r0 = rf(userID, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProfilePicture provides a mock function with given fields: userID
func (_m *DBLayerMock) DeleteProfilePicture(userID uuid.UUID) (string, error) {
	ret := _m.Called(userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfilePictureURL provides a mock function with given fields: userID
func (_m *DBLayerMock) GetProfilePictureURL(userID uuid.UUID) (string, error) {
	ret := _m.Called(userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: uid
func (_m *DBLayerMock) GetUserById(uid uuid.UUID) (models.User, error) {
	ret := _m.Called(uid)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.User); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: _a0
func (_m *DBLayerMock) RegisterUser(_a0 models.User) (models.User, models.VerificationCode, error) {
	ret := _m.Called(_a0)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 models.VerificationCode
	if rf, ok := ret.Get(1).(func(models.User) models.VerificationCode); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(models.VerificationCode)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(models.User) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SignIn provides a mock function with given fields: email, password
func (_m *DBLayerMock) SignIn(email string, password string) (models.User, error) {
	ret := _m.Called(email, password)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string, string) models.User); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyCode provides a mock function with given fields: code
func (_m *DBLayerMock) VerifyCode(code string) (models.User, error) {
	ret := _m.Called(code)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDBLayerMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBLayerMock creates a new instance of DBLayerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBLayerMock(t mockConstructorTestingTNewDBLayerMock) *DBLayerMock {
	mock := &DBLayerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
