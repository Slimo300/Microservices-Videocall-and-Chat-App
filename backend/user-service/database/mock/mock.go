// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Slimo300/Microservices-Videocall-and-Chat-App/backend/user-service/models"

	uuid "github.com/google/uuid"
)

// UsersMockRepository is an autogenerated mock type for the UsersRepository type
type UsersMockRepository struct {
	mock.Mock
}

// CreateAuthorizationCode provides a mock function with given fields: ctx, code
func (_m *UsersMockRepository) CreateAuthorizationCode(ctx context.Context, code *models.AuthorizationCode) error {
	ret := _m.Called(ctx, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AuthorizationCode) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *UsersMockRepository) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UsersMockRepository) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *UsersMockRepository) GetUserByID(ctx context.Context, userID uuid.UUID) (*models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, user, code
func (_m *UsersMockRepository) RegisterUser(ctx context.Context, user *models.User, code *models.AuthorizationCode) error {
	ret := _m.Called(ctx, user, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, *models.AuthorizationCode) error); ok {
		r0 = rf(ctx, user, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserByCode provides a mock function with given fields: ctx, code, codeType, updateFn
func (_m *UsersMockRepository) UpdateUserByCode(ctx context.Context, code uuid.UUID, codeType models.CodeType, updateFn func(*models.User) (*models.User, error)) error {
	ret := _m.Called(ctx, code, codeType, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.CodeType, func(*models.User) (*models.User, error)) error); ok {
		r0 = rf(ctx, code, codeType, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserByID provides a mock function with given fields: ctx, userID, updateFn
func (_m *UsersMockRepository) UpdateUserByID(ctx context.Context, userID uuid.UUID, updateFn func(*models.User) (*models.User, error)) error {
	ret := _m.Called(ctx, userID, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, func(*models.User) (*models.User, error)) error); ok {
		r0 = rf(ctx, userID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUsersMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersMockRepository creates a new instance of UsersMockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersMockRepository(t mockConstructorTestingTNewUsersMockRepository) *UsersMockRepository {
	mock := &UsersMockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
