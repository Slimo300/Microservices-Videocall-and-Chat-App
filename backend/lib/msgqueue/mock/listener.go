// Code generated by mockery v2.14.1. DO NOT EDIT.

package mock

import (
	msgqueue "github.com/Slimo300/MicroservicesChatApp/backend/lib/msgqueue"
	mock "github.com/stretchr/testify/mock"
)

// MockListener is an autogenerated mock type for the EventListener type
type MockListener struct {
	mock.Mock
}

// Listen provides a mock function with given fields: eventNames
func (_m *MockListener) Listen(eventNames ...string) (<-chan msgqueue.Event, <-chan error, error) {
	_va := make([]interface{}, len(eventNames))
	for _i := range eventNames {
		_va[_i] = eventNames[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 <-chan msgqueue.Event
	if rf, ok := ret.Get(0).(func(...string) <-chan msgqueue.Event); ok {
		r0 = rf(eventNames...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan msgqueue.Event)
		}
	}

	var r1 <-chan error
	if rf, ok := ret.Get(1).(func(...string) <-chan error); ok {
		r1 = rf(eventNames...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(...string) error); ok {
		r2 = rf(eventNames...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewMockListener interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockListener creates a new instance of MockListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockListener(t mockConstructorTestingTNewMockListener) *MockListener {
	mock := &MockListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
