// Code generated by mockery v2.20.0. DO NOT EDIT.

package auth

import (
	rsa "crypto/rsa"

	pb "github.com/Slimo300/MicroservicesChatApp/backend/lib/auth/pb"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockTokenClient is an autogenerated mock type for the TokenClient type
type MockTokenClient struct {
	mock.Mock
}

// DeleteUserToken provides a mock function with given fields: refresh
func (_m *MockTokenClient) DeleteUserToken(refresh string) error {
	ret := _m.Called(refresh)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(refresh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPublicKey provides a mock function with given fields: keyID
func (_m *MockTokenClient) GetPublicKey(keyID string) (*rsa.PublicKey, error) {
	ret := _m.Called(keyID)

	var r0 *rsa.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*rsa.PublicKey, error)); ok {
		return rf(keyID)
	}
	if rf, ok := ret.Get(0).(func(string) *rsa.PublicKey); ok {
		r0 = rf(keyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(keyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPairFromRefresh provides a mock function with given fields: refresh
func (_m *MockTokenClient) NewPairFromRefresh(refresh string) (*pb.TokenPair, error) {
	ret := _m.Called(refresh)

	var r0 *pb.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*pb.TokenPair, error)); ok {
		return rf(refresh)
	}
	if rf, ok := ret.Get(0).(func(string) *pb.TokenPair); ok {
		r0 = rf(refresh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPairFromUserID provides a mock function with given fields: userID
func (_m *MockTokenClient) NewPairFromUserID(userID uuid.UUID) (*pb.TokenPair, error) {
	ret := _m.Called(userID)

	var r0 *pb.TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*pb.TokenPair, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *pb.TokenPair); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.TokenPair)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTokenClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTokenClient creates a new instance of MockTokenClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTokenClient(t mockConstructorTestingTNewMockTokenClient) *MockTokenClient {
	mock := &MockTokenClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
