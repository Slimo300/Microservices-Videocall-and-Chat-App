// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"

	rsa "crypto/rsa"

	time "time"
)

// MockTokenRepository is an autogenerated mock type for the TokenRepository type
type MockTokenRepository struct {
	mock.Mock
}

// GetPrivateKey provides a mock function with given fields:
func (_m *MockTokenRepository) GetPrivateKey() (*rsa.PrivateKey, error) {
	ret := _m.Called()

	var r0 *rsa.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func() (*rsa.PrivateKey, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *rsa.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateToken provides a mock function with given fields: userID, tokenID
func (_m *MockTokenRepository) InvalidateToken(userID string, tokenID string) error {
	ret := _m.Called(userID, tokenID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, tokenID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InvalidateTokens provides a mock function with given fields: userID, tokenID
func (_m *MockTokenRepository) InvalidateTokens(userID string, tokenID string) error {
	ret := _m.Called(userID, tokenID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, tokenID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsTokenValid provides a mock function with given fields: userID, tokenID
func (_m *MockTokenRepository) IsTokenValid(userID string, tokenID string) (bool, error) {
	ret := _m.Called(userID, tokenID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(userID, tokenID)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userID, tokenID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, tokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveToken provides a mock function with given fields: token, expiration
func (_m *MockTokenRepository) SaveToken(token string, expiration time.Duration) error {
	ret := _m.Called(token, expiration)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(token, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPrivateKey provides a mock function with given fields: key
func (_m *MockTokenRepository) SetPrivateKey(key *rsa.PrivateKey) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(*rsa.PrivateKey) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockTokenRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTokenRepository creates a new instance of MockTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTokenRepository(t mockConstructorTestingTNewMockTokenRepository) *MockTokenRepository {
	mock := &MockTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
