// Code generated by mockery v2.8.0. DO NOT EDIT.

package database

import (
	time "time"

	models "github.com/Slimo300/MicroservicesChatApp/backend/message-service/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockMessageDB is an autogenerated mock type for the DBLayer type
type MockMessageDB struct {
	mock.Mock
}

// AddMessage provides a mock function with given fields: memberID, text, when
func (_m *MockMessageDB) AddMessage(memberID uuid.UUID, text string, when time.Time) error {
	ret := _m.Called(memberID, text, when)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, time.Time) error); ok {
		r0 = rf(memberID, text, when)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupMessages provides a mock function with given fields: grouID, offset, num
func (_m *MockMessageDB) GetGroupMessages(grouID uuid.UUID, offset int, num int) ([]models.Message, error) {
	ret := _m.Called(grouID, offset, num)

	var r0 []models.Message
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int) []models.Message); ok {
		r0 = rf(grouID, offset, num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, int, int) error); ok {
		r1 = rf(grouID, offset, num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserInGroup provides a mock function with given fields: userID, groupID
func (_m *MockMessageDB) IsUserInGroup(userID uuid.UUID, groupID uuid.UUID) bool {
	ret := _m.Called(userID, groupID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(userID, groupID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
