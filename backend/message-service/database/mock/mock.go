// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Slimo300/Microservices-Videocall-and-Chat-App/backend/message-service/models"

	uuid "github.com/google/uuid"
)

// MockMessagesRepository is an autogenerated mock type for the MessagesRepository type
type MockMessagesRepository struct {
	mock.Mock
}

// CreateMember provides a mock function with given fields: ctx, member
func (_m *MockMessagesRepository) CreateMember(ctx context.Context, member models.Member) error {
	ret := _m.Called(ctx, member)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Member) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMessage provides a mock function with given fields: ctx, message
func (_m *MockMessagesRepository) CreateMessage(ctx context.Context, message models.Message) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroup provides a mock function with given fields: ctx, groupID
func (_m *MockMessagesRepository) DeleteGroup(ctx context.Context, groupID uuid.UUID) error {
	ret := _m.Called(ctx, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMember provides a mock function with given fields: ctx, memberID
func (_m *MockMessagesRepository) DeleteMember(ctx context.Context, memberID uuid.UUID) error {
	ret := _m.Called(ctx, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessageForEveryone provides a mock function with given fields: ctx, userID, messageID
func (_m *MockMessagesRepository) DeleteMessageForEveryone(ctx context.Context, userID uuid.UUID, messageID uuid.UUID) error {
	ret := _m.Called(ctx, userID, messageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMessageForYourself provides a mock function with given fields: ctx, userID, messageID
func (_m *MockMessagesRepository) DeleteMessageForYourself(ctx context.Context, userID uuid.UUID, messageID uuid.UUID) error {
	ret := _m.Called(ctx, userID, messageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, messageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupMessages provides a mock function with given fields: ctx, userID, groupID, offset, num
func (_m *MockMessagesRepository) GetGroupMessages(ctx context.Context, userID uuid.UUID, groupID uuid.UUID, offset int, num int) ([]models.Message, error) {
	ret := _m.Called(ctx, userID, groupID, offset, num)

	var r0 []models.Message
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, int, int) []models.Message); ok {
		r0 = rf(ctx, userID, groupID, offset, num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, userID, groupID, offset, num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageByID provides a mock function with given fields: ctx, userID, messageID
func (_m *MockMessagesRepository) GetMessageByID(ctx context.Context, userID uuid.UUID, messageID uuid.UUID) (models.Message, error) {
	ret := _m.Called(ctx, userID, messageID)

	var r0 models.Message
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) models.Message); ok {
		r0 = rf(ctx, userID, messageID)
	} else {
		r0 = ret.Get(0).(models.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroupMember provides a mock function with given fields: ctx, userID, groupID
func (_m *MockMessagesRepository) GetUserGroupMember(ctx context.Context, userID uuid.UUID, groupID uuid.UUID) (models.Member, error) {
	ret := _m.Called(ctx, userID, groupID)

	var r0 models.Member
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) models.Member); ok {
		r0 = rf(ctx, userID, groupID)
	} else {
		r0 = ret.Get(0).(models.Member)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMember provides a mock function with given fields: ctx, memberID, updateFn
func (_m *MockMessagesRepository) UpdateMember(ctx context.Context, memberID uuid.UUID, updateFn func(*models.Member) bool) error {
	ret := _m.Called(ctx, memberID, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, func(*models.Member) bool) error); ok {
		r0 = rf(ctx, memberID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockMessagesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMessagesRepository creates a new instance of MockMessagesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMessagesRepository(t mockConstructorTestingTNewMockMessagesRepository) *MockMessagesRepository {
	mock := &MockMessagesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
