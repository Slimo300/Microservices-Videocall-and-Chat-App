// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	storage "github.com/Slimo300/Microservices-Videocall-and-Chat-App/backend/message-service/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the StorageLayer type
type MockStorage struct {
	mock.Mock
}

// DeleteFile provides a mock function with given fields: key
func (_m *MockStorage) DeleteFile(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFolder provides a mock function with given fields: folder
func (_m *MockStorage) DeleteFolder(folder string) error {
	ret := _m.Called(folder)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(folder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPresignedGetRequests provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) GetPresignedGetRequests(_a0 string, _a1 ...storage.GetFileInput) ([]storage.GetFileOutput, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []storage.GetFileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...storage.GetFileInput) ([]storage.GetFileOutput, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(string, ...storage.GetFileInput) []storage.GetFileOutput); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.GetFileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...storage.GetFileInput) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPresignedPutRequests provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) GetPresignedPutRequests(_a0 string, _a1 ...storage.PutFileInput) ([]storage.PutFileOutput, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []storage.PutFileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...storage.PutFileInput) ([]storage.PutFileOutput, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(string, ...storage.PutFileInput) []storage.PutFileOutput); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.PutFileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...storage.PutFileInput) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStorage(t mockConstructorTestingTNewMockStorage) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
