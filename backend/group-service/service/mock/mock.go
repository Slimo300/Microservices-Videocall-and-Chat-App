// Code generated by mockery v2.42.0. DO NOT EDIT.

package mock

import (
	multipart "mime/multipart"

	models "github.com/Slimo300/Microservices-Videocall-and-Chat-App/backend/group-service/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockGroupService is an autogenerated mock type for the ServiceLayer type
type MockGroupService struct {
	mock.Mock
}

// AddInvite provides a mock function with given fields: issID, targetID, groupID
func (_m *MockGroupService) AddInvite(issID uuid.UUID, targetID uuid.UUID, groupID uuid.UUID) (*models.Invite, error) {
	ret := _m.Called(issID, targetID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for AddInvite")
	}

	var r0 *models.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) (*models.Invite, error)); ok {
		return rf(issID, targetID, groupID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) *models.Invite); ok {
		r0 = rf(issID, targetID, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(issID, targetID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: userID, name
func (_m *MockGroupService) CreateGroup(userID uuid.UUID, name string) (*models.Group, error) {
	ret := _m.Called(userID, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *models.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (*models.Group, error)); ok {
		return rf(userID, name)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) *models.Group); ok {
		r0 = rf(userID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(userID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: userID, groupID
func (_m *MockGroupService) DeleteGroup(userID uuid.UUID, groupID uuid.UUID) (*models.Group, error) {
	ret := _m.Called(userID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *models.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (*models.Group, error)); ok {
		return rf(userID, groupID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *models.Group); ok {
		r0 = rf(userID, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(userID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroupPicture provides a mock function with given fields: userID, groupID
func (_m *MockGroupService) DeleteGroupPicture(userID uuid.UUID, groupID uuid.UUID) error {
	ret := _m.Called(userID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupPicture")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(userID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMember provides a mock function with given fields: userID, memberID
func (_m *MockGroupService) DeleteMember(userID uuid.UUID, memberID uuid.UUID) (*models.Member, error) {
	ret := _m.Called(userID, memberID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMember")
	}

	var r0 *models.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (*models.Member, error)); ok {
		return rf(userID, memberID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *models.Member); ok {
		r0 = rf(userID, memberID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(userID, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroups provides a mock function with given fields: id
func (_m *MockGroupService) GetUserGroups(id uuid.UUID) ([]*models.Group, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGroups")
	}

	var r0 []*models.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*models.Group, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*models.Group); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInvites provides a mock function with given fields: userID, num, offset
func (_m *MockGroupService) GetUserInvites(userID uuid.UUID, num int, offset int) ([]*models.Invite, error) {
	ret := _m.Called(userID, num, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInvites")
	}

	var r0 []*models.Invite
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int) ([]*models.Invite, error)); ok {
		return rf(userID, num, offset)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, int, int) []*models.Invite); ok {
		r0 = rf(userID, num, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, int, int) error); ok {
		r1 = rf(userID, num, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantRights provides a mock function with given fields: userID, memberID, rights
func (_m *MockGroupService) GrantRights(userID uuid.UUID, memberID uuid.UUID, rights models.MemberRights) (*models.Member, error) {
	ret := _m.Called(userID, memberID, rights)

	if len(ret) == 0 {
		panic("no return value specified for GrantRights")
	}

	var r0 *models.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, models.MemberRights) (*models.Member, error)); ok {
		return rf(userID, memberID, rights)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, models.MemberRights) *models.Member); ok {
		r0 = rf(userID, memberID, rights)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, models.MemberRights) error); ok {
		r1 = rf(userID, memberID, rights)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RespondInvite provides a mock function with given fields: userID, inviteID, answer
func (_m *MockGroupService) RespondInvite(userID uuid.UUID, inviteID uuid.UUID, answer bool) (*models.Invite, *models.Group, error) {
	ret := _m.Called(userID, inviteID, answer)

	if len(ret) == 0 {
		panic("no return value specified for RespondInvite")
	}

	var r0 *models.Invite
	var r1 *models.Group
	var r2 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, bool) (*models.Invite, *models.Group, error)); ok {
		return rf(userID, inviteID, answer)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, bool) *models.Invite); ok {
		r0 = rf(userID, inviteID, answer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Invite)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, bool) *models.Group); ok {
		r1 = rf(userID, inviteID, answer)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Group)
		}
	}

	if rf, ok := ret.Get(2).(func(uuid.UUID, uuid.UUID, bool) error); ok {
		r2 = rf(userID, inviteID, answer)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetGroupPicture provides a mock function with given fields: userID, groupID, file
func (_m *MockGroupService) SetGroupPicture(userID uuid.UUID, groupID uuid.UUID, file multipart.File) (string, error) {
	ret := _m.Called(userID, groupID, file)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupPicture")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, multipart.File) (string, error)); ok {
		return rf(userID, groupID, file)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, multipart.File) string); ok {
		r0 = rf(userID, groupID, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, multipart.File) error); ok {
		r1 = rf(userID, groupID, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockGroupService creates a new instance of MockGroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGroupService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGroupService {
	mock := &MockGroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
