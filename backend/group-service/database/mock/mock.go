// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Slimo300/Microservices-Videocall-and-Chat-App/backend/group-service/models"

	uuid "github.com/google/uuid"
)

// GroupsMockRepository is an autogenerated mock type for the GroupsRepository type
type GroupsMockRepository struct {
	mock.Mock
}

// CreateGroup provides a mock function with given fields: ctx, group
func (_m *GroupsMockRepository) CreateGroup(ctx context.Context, group models.Group) (models.Group, error) {
	ret := _m.Called(ctx, group)

	var r0 models.Group
	if rf, ok := ret.Get(0).(func(context.Context, models.Group) models.Group); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Get(0).(models.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Group) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvite provides a mock function with given fields: ctx, invite
func (_m *GroupsMockRepository) CreateInvite(ctx context.Context, invite models.Invite) (models.Invite, error) {
	ret := _m.Called(ctx, invite)

	var r0 models.Invite
	if rf, ok := ret.Get(0).(func(context.Context, models.Invite) models.Invite); ok {
		r0 = rf(ctx, invite)
	} else {
		r0 = ret.Get(0).(models.Invite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Invite) error); ok {
		r1 = rf(ctx, invite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *GroupsMockRepository) CreateUser(ctx context.Context, user models.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroup provides a mock function with given fields: ctx, userID, groupID
func (_m *GroupsMockRepository) DeleteGroup(ctx context.Context, userID uuid.UUID, groupID uuid.UUID) error {
	ret := _m.Called(ctx, userID, groupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMember provides a mock function with given fields: ctx, userID, memberID
func (_m *GroupsMockRepository) DeleteMember(ctx context.Context, userID uuid.UUID, memberID uuid.UUID) error {
	ret := _m.Called(ctx, userID, memberID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, memberID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupByID provides a mock function with given fields: ctx, userID, groupID
func (_m *GroupsMockRepository) GetGroupByID(ctx context.Context, userID uuid.UUID, groupID uuid.UUID) (models.Group, error) {
	ret := _m.Called(ctx, userID, groupID)

	var r0 models.Group
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) models.Group); ok {
		r0 = rf(ctx, userID, groupID)
	} else {
		r0 = ret.Get(0).(models.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInviteByID provides a mock function with given fields: ctx, userID, inviteID
func (_m *GroupsMockRepository) GetInviteByID(ctx context.Context, userID uuid.UUID, inviteID uuid.UUID) (models.Invite, error) {
	ret := _m.Called(ctx, userID, inviteID)

	var r0 models.Invite
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) models.Invite); ok {
		r0 = rf(ctx, userID, inviteID)
	} else {
		r0 = ret.Get(0).(models.Invite)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, inviteID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMemberByID provides a mock function with given fields: ctx, userID, memberID
func (_m *GroupsMockRepository) GetMemberByID(ctx context.Context, userID uuid.UUID, memberID uuid.UUID) (models.Member, error) {
	ret := _m.Called(ctx, userID, memberID)

	var r0 models.Member
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) models.Member); ok {
		r0 = rf(ctx, userID, memberID)
	} else {
		r0 = ret.Get(0).(models.Member)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *GroupsMockRepository) GetUserByID(ctx context.Context, userID uuid.UUID) (models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroups provides a mock function with given fields: ctx, userID
func (_m *GroupsMockRepository) GetUserGroups(ctx context.Context, userID uuid.UUID) ([]models.Group, error) {
	ret := _m.Called(ctx, userID)

	var r0 []models.Group
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Group); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInvites provides a mock function with given fields: ctx, userID, num, offset
func (_m *GroupsMockRepository) GetUserInvites(ctx context.Context, userID uuid.UUID, num int, offset int) ([]models.Invite, error) {
	ret := _m.Called(ctx, userID, num, offset)

	var r0 []models.Invite
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []models.Invite); ok {
		r0 = rf(ctx, userID, num, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Invite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, userID, num, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: ctx, groupID, updateFn
func (_m *GroupsMockRepository) UpdateGroup(ctx context.Context, groupID uuid.UUID, updateFn func(*models.Group) error) error {
	ret := _m.Called(ctx, groupID, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, func(*models.Group) error) error); ok {
		r0 = rf(ctx, groupID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInvite provides a mock function with given fields: ctx, inviteID, updateFn
func (_m *GroupsMockRepository) UpdateInvite(ctx context.Context, inviteID uuid.UUID, updateFn func(*models.Invite) (*models.Member, error)) error {
	ret := _m.Called(ctx, inviteID, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, func(*models.Invite) (*models.Member, error)) error); ok {
		r0 = rf(ctx, inviteID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMember provides a mock function with given fields: ctx, userID, memberID, updateFn
func (_m *GroupsMockRepository) UpdateMember(ctx context.Context, userID uuid.UUID, memberID uuid.UUID, updateFn func(*models.Member, *models.Member) error) error {
	ret := _m.Called(ctx, userID, memberID, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, func(*models.Member, *models.Member) error) error); ok {
		r0 = rf(ctx, userID, memberID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, userID, updateFn
func (_m *GroupsMockRepository) UpdateUser(ctx context.Context, userID uuid.UUID, updateFn func(*models.User) error) error {
	ret := _m.Called(ctx, userID, updateFn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, func(*models.User) error) error); ok {
		r0 = rf(ctx, userID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGroupsMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGroupsMockRepository creates a new instance of GroupsMockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGroupsMockRepository(t mockConstructorTestingTNewGroupsMockRepository) *GroupsMockRepository {
	mock := &GroupsMockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
